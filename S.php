| | All rights reserved. | +-----------------------------------------------------------------------------+ | PLEASE READ THE FULL TEXT OF SOFTWARE LICENSE AGREEMENT IN THE "COPYRIGHT" | | FILE PROVIDED WITH THIS DISTRIBUTION. THE AGREEMENT TEXT IS ALSO AVAILABLE | | AT THE FOLLOWING URL: http://www.x-cart.com/license.php | | | | THIS AGREEMENT EXPRESSES THE TERMS AND CONDITIONS ON WHICH YOU MAY USE | | THIS SOFTWARE PROGRAM AND ASSOCIATED DOCUMENTATION THAT RUSLAN R. | | FAZLIEV (hereinafter referred to as "THE AUTHOR") IS FURNISHING OR MAKING | | AVAILABLE TO YOU WITH THIS AGREEMENT (COLLECTIVELY, THE "SOFTWARE"). | | PLEASE REVIEW THE TERMS AND CONDITIONS OF THIS LICENSE AGREEMENT | | CAREFULLY BEFORE INSTALLING OR USING THE SOFTWARE. BY INSTALLING, | | COPYING OR OTHERWISE USING THE SOFTWARE, YOU AND YOUR COMPANY | | (COLLECTIVELY, "YOU") ARE ACCEPTING AND AGREEING TO THE TERMS OF THIS | | LICENSE AGREEMENT. IF YOU ARE NOT WILLING TO BE BOUND BY THIS | | AGREEMENT, DO NOT INSTALL OR USE THE SOFTWARE. VARIOUS COPYRIGHTS AND | | OTHER INTELLECTUAL PROPERTY RIGHTS PROTECT THE SOFTWARE. THIS | | AGREEMENT IS A LICENSE AGREEMENT THAT GIVES YOU LIMITED RIGHTS TO USE | | THE SOFTWARE AND NOT AN AGREEMENT FOR SALE OR FOR TRANSFER OF TITLE.| | THE AUTHOR RETAINS ALL RIGHTS NOT EXPRESSLY GRANTED BY THIS AGREEMENT. | | | | The Initial Developer of the Original Code is Ruslan R. Fazliev | | Portions created by Ruslan R. Fazliev are Copyright (C) 2001-2008 | | Ruslan R. Fazliev. All Rights Reserved. | +-----------------------------------------------------------------------------+ \*****************************************************************************/ if($_SERVER["HTTPS"] != "on") { header("Location: https://" . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]); exit(); } # # $Id: cart.php,v 1.95.2.75 2011/04/11 10:40:50 djc Exp $ # # This script implements shopping cart facility # //Required scripts to load require_once "./auth.php"; require_once "./top.inc.php"; require_once "./config.php"; require_once $xcart_dir."/include/cart_process.php"; //Included scripts include_once $xcart_dir."/shipping/shipping.php"; //Load config files x_load('cart','crypt','mail','user'); //Wishlist facility if (!empty($active_modules['Wishlist'])) { if ($mode == 'add2wl' || $mode == "wishlist") { require $xcart_dir."/include/remember_user.php"; } elseif (!empty($login) && !empty($remember_data) && ($mode == 'add2wl' || $mode == "wishlist" || $mode == 'add')) { require $xcart_dir."/include/remember_user.php"; } } //Load (reload?) config files x_load('cart','user','order','tests'); //Register X-Cart session variables x_session_register("cart"); x_session_register("intershipper_rates"); x_session_register("intershipper_recalc"); x_session_unregister("secure_oid"); x_session_register("payment_cc_fields"); x_session_register("current_carrier","UPS"); x_session_register("order_secureid"); x_session_register("is_sns_action"); x_session_register("cart_locked"); x_session_register("dhl_ext_country_store"); x_session_register("ga_track_commerce"); x_session_register("initial_state_orders", array()); x_session_register("initial_state_show_notif", "Y"); x_session_register("enter_as_anonymous", false); x_session_register("enter2cart_as_anonymous", false); x_session_register("user_payment_data"); x_session_register("payment_method"); x_session_register("card_name"); x_session_register("card_type"); x_session_register("card_number"); x_session_register("card_cvv2"); x_session_register("card_expiration"); x_session_register("userinfo"); x_session_register("newUser"); x_session_register("uname"); x_session_register("ship2diff"); x_session_register("passwd1"); x_session_register("passwd2"); x_session_register("profile_values"); x_session_register("tempCCValue"); x_session_register("tempCVV2Value"); x_session_register("confirmCCType"); x_session_register("confirmCCName"); x_session_register("confirmCCNumber"); x_session_register("confirmCCExpiration"); x_session_register("confirmCCCVV2"); x_session_register("cartpost"); //print(serialize($profile_values)); $smarty->assign("profile_values", $profile_values); $smarty->assign("confirmCCType",$confirmCCType); $smarty->assign("confirmCCName",$confirmCCName); $smarty->assign("confirmCCNumber",$confirmCCNumber); $smarty->assign("confirmCCExpiration",$confirmCCExpiration); $smarty->assign("confirmCCCVV2",$confirmCCCVV2); /************************************************************* * On to the fun... */ /* //if there was an error in the registration process (both for new users and anon users) //there will be an error shown. Fill in the information that was passed by the form previously. if (!empty($profile_values)) { } */ //Hold a value as to whether or not the cart is empty. $func_is_cart_empty = func_is_cart_empty($cart); //Check for blacklisted activity if (!empty($active_modules["Stop_List"]) && !func_is_allowed_trans() && !$func_is_cart_empty) { if($mode == "checkout" || $mode == "auth") { $top_message["content"] = func_get_langvar_by_name("txt_stop_list_customer_note"); $top_message["type"] = "E"; func_header_location("cart.php"); } $smarty->assign("unallowed_transaction", "Y"); } //Normalize (?) cart content //dcahill - looks to check for other active modules and flags on products and set appropriate prices if (!$func_is_cart_empty && $REQUEST_METHOD == "GET" && !in_array($mode, array("wishlist","wl2cart"))) { $cart_changed = func_cart_normalize($cart); } /******************************************************* * Cart processes (check mode) *******************************************************/ if (($mode == "checkout" || $mode == "auth") && !$func_is_cart_empty) { if (empty($login) && !$enter_as_anonymous) { $enter_as_anonymous = true; } $payment_methods = check_payment_methods_nomembership(); $smarty->assign("payment_methods", $payment_methods); if (empty($payment_methods)) { $top_message['content'] = func_get_langvar_by_name("txt_no_payment_methods"); $top_message['type'] = 'E'; func_header_location("cart.php"); } } //Clear the cart if ($mode == "clear_cart") { if (!empty($active_modules["SnS_connector"]) && !empty($cart["products"])) { foreach ($cart["products"] as $p) { $is_sns_action['DeleteFromCart'][] = $p['productid']; } } $cart = ""; func_header_location("cart.php"); } //Disable notifications about previously uncompleted orders if ($mode == 'disable_init_state_notif') { $initial_state_show_notif = ''; if (!empty($HTTP_REFERER)) { func_header_location($HTTP_REFERER); } else { func_header_location("cart.php"); } } $smarty->assign("register_script_name",(($config["General"]["use_https_login"] == "Y") ? $xcart_catalogs_secure["customer"]."/" : "")."cart.php"); //populate the user registration portion of the page if ($mode == "checkout" && !$func_is_cart_empty) { $usertype = "C"; $old_action = $action; $action = "cart"; $smarty->assign("action", $action); if (empty($login)) //display required fields { $newbie = "Y"; include_once $xcart_dir."/include/register.php"; } $smarty->assign("default_fields", $default_fields); if (!empty($auto_login)) { func_header_location("cart.php?mode=checkoutÂ®istered="); } $saved_userinfo = $userinfo; $action = $old_action; $smarty->assign("newbie", $newbie); } //Populate the shipping methods. Also, populate extra information if the user is logged in if (!empty($login)) { $userinfo = func_userinfo($login, $current_area, false, false, "H"); } //Add a product if ($mode == "add" && !empty($productid)) { $addit='yes'; //Add product to the cart $add_product = array(); $add_product["productid"] = abs(intval($productid)); $add_product["amount"] = abs(intval($amount)); $add_product["product_options"] = $product_options; $add_product["price"] = abs(doubleval($price)); //Add to cart $result = func_add_to_cart($cart, $add_product); if (!empty($result["redirect_to"])) { func_header_location($result["redirect_to"]); } $intershipper_recalc = "Y"; //Recalculate cart totals after new item added $products = func_products_in_cart($cart, (!empty($user_account["membershipid"]) ? $user_account["membershipid"] : "")); $cart = func_array_merge($cart, func_calculate($cart, $products, $login, $current_area, 0)); //Redirect if ($config["General"]["redirect_to_cart"] == "Y") { if (!empty($active_modules["SnS_connector"])) { $is_sns_action['AddToCart'][] = $productid; } func_header_location("cart.php"); } else { $products = func_products_in_cart($cart, (!empty($user_account["membershipid"]) ? $user_account["membershipid"] : "")); $cart = func_array_merge($cart, func_calculate($cart, $products, $login, $current_area, 0)); if (!empty($active_modules["SnS_connector"])) { func_generate_sns_action("AddToCart", $productid); } func_save_customer_cart($login, $cart); if (!empty($HTTP_REFERER)) { $tmp = parse_url($HTTP_REFERER); if ($config["General"]["return_to_dynamic_part"] == "Y" && $is_hc == "Y" && (strpos($tmp["path"], ".html") !== false || substr($tmp["path"], -1) == "/")) { if(substr($tmp["path"], -1) == "/") { func_header_location("home.php"); } elseif (strpos($HTTP_REFERER, "-c-") !== false) { func_header_location("home.php?cat=$cat&page=$page"); } else { func_header_location("product.php?productid=".$add_product["productid"]); } } else { func_header_location($HTTP_REFERER); } } else { func_header_location("home.php?cat=$cat&page=$page"); } } } //Delete a product if ($mode == "delete" && !empty($productindex)) { # # Delete product from the cart # if (!empty($cart['products']) && is_array($cart['products'])) { $productid = func_delete_from_cart($cart, $productindex); if (!empty($active_modules["SnS_connector"])) $is_sns_action['DeleteFromCart'][] = $productid; $intershipper_recalc = "Y"; } # Recalculate cart totals after updating $products = func_products_in_cart($cart, (!empty($user_account["membershipid"]) ? $user_account["membershipid"] : "")); $cart = func_array_merge($cart, func_calculate($cart, $products, $login, $current_area, 0)); func_header_location("cart.php"); } //Update the cart if ($action == "update" && !$func_is_cart_empty) { if (!empty($productindexes)) { //Update the quantity of products in cart $min_amount_warns = func_update_quantity_in_cart($cart, $productindexes); $top_message = func_generate_min_amount_warning($min_amount_warns, $productindexes, $cart["products"]); if (!empty($active_modules["SnS_connector"])) { $is_sns_action['CartChanged'][] = false; } $intershipper_recalc = "Y"; } //Update shipping method if ($config["Shipping"]["realtime_shipping"] == "Y" && !empty($active_modules["UPS_OnLine_Tools"]) && $config["Shipping"]["use_intershipper"] != "Y") { $current_carrier = $selected_carrier; } if (!empty($shippingid)) { $cart["shippingid"] = $shippingid; } if (!empty($mode)) { $url_args[] = "mode=".$mode; } if (!empty($paymentid)) { $url_args[] = "paymentid=".$paymentid; } $return_url = "cart.php".(!empty($url_args) ? "?".implode("&", $url_args) : ""); $func_is_cart_empty = func_is_cart_empty($cart); $products = func_products_in_cart($cart, (!empty($user_account["membershipid"]) ? $user_account["membershipid"] : "")); $cart = func_array_merge($cart, func_calculate($cart, $products, $login, $current_area, 0)); func_header_location($return_url); } /******************************************************** * "Maintenance" code (build the variables for the cart, shipping methods, etc.) ********************************************************/ //If there are items in the cart, build the value around the items to display the cart if (!$func_is_cart_empty) { //Prepare cart for calculation $products = func_products_in_cart($cart, (!empty($userinfo["membershipid"]) ? $userinfo["membershipid"] : "")); $ProdCount = 0; $NonSubProdCount = 0; $SubProdCount = 0; $AUProd = false; $AUProdCount = 0; $EUProd = false; $EUProdCount = 0; $LoginUser_ShowCheckout = false; $LoginUserCountry = ""; $LoginUserRegion = ""; foreach ($products as $pr) { $ProdCount++; if (stristr($pr["keywords"], "RegAU")) { $AUProd = true; $AUProdCount++; } if (stristr($pr["keywords"], "RegEU")) { $EUProd = true; $EUProdCount++; } if (stristr($pr["keywords"], "Subscription")) { $SubProdCount++; } else { $NonSubProdCount++; } } if (!empty($login)) { $LoginUserCountry = $userinfo["s_country"]; include $xcart_dir."/include/countries.php"; foreach ($countries as $currCountry) { if ($currCountry["country_code"] == $LoginUserCountry) { $LoginUserRegion = $currCountry["region"]; } } //print($LoginUserRegion); //print(serialize($countries)); } $smarty->assign("ProdCount", $ProdCount); $smarty->assign("SubProdCount", $SubProdCount); $smarty->assign("NonSubProdCount", $NonSubProdCount); $smarty->assign("AUProd", $AUProd); $smarty->assign("AUProdCount", $AUProdCount); $smarty->assign("EUProd", $EUProd); $smarty->assign("EUProdCount", $EUProdCount); $smarty->assign("LoginUserCountry", $LoginUserCountry); $smarty->assign("LoginUserRegion", $LoginUserRegion); if ($ProdCount > 0 && ((($AUProd == 1) || ($EUProd == 1)) && $SubProdCount > 1)) { $top_message['content'] = func_get_langvar_by_name("msg_sub_region"); $top_message['type'] = 'E'; $smarty->assign("top_message", $top_message); } if ($ProdCount > 0 && ((($AUProd == 1) || ($EUProd == 1)) && $NonSubProdCount > 0)) { $top_message['content'] = func_get_langvar_by_name("msg_non_us_order"); $top_message['type'] = 'E'; $smarty->assign("top_message", $top_message); } if ($LoginUserCountry != "US" && $LoginUserCountry != "" && $NonSubProdCount > 0) { $top_message['content'] = func_get_langvar_by_name("msg_non_us_order"); $top_message['type'] = 'E'; $smarty->assign("top_message", $top_message); } if ($SubProdCount >= 1 && $LoginUserRegion != "" && $LoginUserRegion != "NA" && $LoginUserRegion != "EU" && $LoginUserRegion != "AU") { $top_message['content'] = func_get_langvar_by_name("msg_non_us_order"); $top_message['type'] = 'E'; $smarty->assign("top_message", $top_message); } if ($SubProdCount >= 1 && $AUProd == "" && $EUProd == "" && $LoginUserRegion != "NA" && $LoginUserRegion != "") { $top_message['content'] = func_get_langvar_by_name("msg_sub_region"); $top_message['type'] = 'E'; $smarty->assign("top_message", $top_message); } if ($SubProdCount >= 1 && $AUProd >= "1" && $EUProd == "" && $LoginUserRegion != "AU" && $LoginUserRegion != "") { $top_message['content'] = func_get_langvar_by_name("msg_sub_region"); $top_message['type'] = 'E'; $smarty->assign("top_message", $top_message); } if ($SubProdCount >= 1 && $AUProd == "" && $EUProd >= "1" && $LoginUserRegion != "EU" && $LoginUserRegion != "") { $top_message['content'] = func_get_langvar_by_name("msg_sub_region"); $top_message['type'] = 'E'; $smarty->assign("top_message", $top_message); } if ($SubProdCount >= 1 && $top_message['type'] != 'E') { $top_message['content'] = func_get_langvar_by_name("msg_sub_checkregion"); $top_message['type'] = 'I'; $smarty->assign("top_message", $top_message); } x_session_save(); if (!empty($cart["products"]) && is_array($products) && count($products) != count($cart["products"])) { //The products array in the cart isn't accords to the store foreach ($products as $k=>$v) { $prodids[] = $v["cartid"]; } if (is_array($prodids)) { foreach ($cart["products"] as $k=>$v) { if (in_array($v["cartid"], $prodids)) { $cart_prods[$k] = $v; } } $cart["products"] = $cart_prods; } else { $cart = ""; } func_header_location("cart.php?$QUERY_STRING"); } if (!empty($active_modules["Subscriptions"])) { $in_cart = true; include $xcart_dir."/modules/Subscriptions/subscription.php"; } if (empty($login) && $config["General"]["apply_default_country"] == "Y") { # Use the default address $userinfo["b_country"] = $userinfo["s_country"] = $config["General"]["default_country"]; $userinfo["b_state"] = $userinfo["s_state"] = $config["General"]["default_state"]; $userinfo["b_zipcode"] = $userinfo["s_zipcode"] = $config["General"]["default_zipcode"]; $userinfo["b_city"] = $userinfo["s_city"] = $config["General"]["default_city"]; $userinfo["b_countryname"] = $userinfo["s_countryname"] = func_get_country($userinfo["s_country"]); $userinfo["b_statename"] = $userinfo["s_statename"] = func_get_state($userinfo["s_state"], $userinfo["s_country"]); } //Check if shipping cost is need to be calculated $need_shipping = false; if ($config["Shipping"]["disable_shipping"] != "Y" && is_array($products) && ((!empty($userinfo) || $config["General"]["apply_default_country"] == 'Y') || $config["Shipping"]["enable_all_shippings"] == "Y")) { foreach ($products as $product) { if (!empty($active_modules["Egoods"]) && !empty($product["distribution"])) { continue; } if (($product["free_shipping"] == "Y" || $product["free_shipping_used"]) && $config["Shipping"]["do_not_require_shipping"] == "Y") { continue; } // Check if all products in the cart have shipping freight if ($config["Shipping"]["replace_shipping_with_freight"] == "Y" && $product["shipping_freight"] > 0) { continue; } $need_shipping = true; break; } } /* # # Discount coupons # if ($active_modules["Discount_Coupons"]) { include $xcart_dir."/modules/Discount_Coupons/discount_coupons.php"; $cart = func_array_merge($cart, func_calculate($cart, $products, $login, $current_area, (!empty($paymentid) ? intval($paymentid) : 0))); } */ if ($need_shipping) { // Get the allowed shipping methods list $_current_carrier = $current_carrier; $shipping = func_get_shipping_methods_list($cart, $products, $userinfo); if (empty($shipping)) { if ($_current_carrier == 'UPS' && $empty_other_carriers != 'Y') { $current_carrier = ''; $intershipper_recalc = 'Y'; $shipping = func_get_shipping_methods_list($cart, $products, $userinfo); } elseif ($_current_carrier == '' && $empty_ups_carrier != 'Y' && !empty($active_modules["UPS_OnLine_Tools"])) { $current_carrier = 'UPS'; $intershipper_recalc = 'Y'; $shipping = func_get_shipping_methods_list($cart, $products, $userinfo); } } //If current shipping is empty set it to default (first in shipping array) $shipping_matched = false; if (!empty($shipping) && is_array($shipping)) { foreach ($shipping as $shipping_method) { if (@$cart["shippingid"] == $shipping_method["shippingid"]) $shipping_matched = true; } } if (!$shipping_matched && !empty($shipping)) $cart["shippingid"] = $shipping[0]["shippingid"]; if (!empty($shipping)) { foreach ($shipping as $shipping_method) { if (@$cart["shippingid"] == $shipping_method["shippingid"]) $cart['shipping_warning'] = $shipping_method['warning']; } } $cart["delivery"] = func_query_first_cell("SELECT shipping FROM $sql_tbl[shipping] WHERE shippingid='$cart[shippingid]'"); $smarty->assign("shipping", $shipping); $smarty->assign("current_carrier", $current_carrier); } else { $cart["delivery"] = ""; $cart["shippingid"] = 0; } $smarty->assign("need_shipping", $need_shipping); /* # # Discount coupons # if ($active_modules["Discount_Coupons"]) include $xcart_dir."/modules/Discount_Coupons/discount_coupons.php"; */ # # Calculate all prices # $cart = func_array_merge($cart, func_calculate($cart, $products, $login, $current_area, (!empty($paymentid) ? intval($paymentid) : 0))); if (func_is_cart_empty($cart)) { if (!empty($active_modules["SnS_connector"])) func_sns_exec_actions($is_sns_action); $cart = ""; func_header_location($xcart_web_dir.DIR_CUSTOMER."/error_message.php?product_in_cart_expired"); } else { $products = func_products_in_cart($cart, (!empty($userinfo["membershipid"])?$userinfo["membershipid"]:0)); } $smarty->assign("cart",$cart); } $smarty->assign("main","cart"); //Set label text on the page if ($mode != "wishlist" || empty($active_modules['Wishlist'])) { if ($mode == "checkout") $location[] = array(func_get_langvar_by_name("lbl_checkout"), ""); else $location[] = array(func_get_langvar_by_name("lbl_your_shopping_cart"), ""); } /************************************************ * Validation ************************************************/ //print("need shipping: $need_shipping"); if ($mode == "checkout" && !empty($cart["products"]) && empty($shipping) && !empty($login) && $need_shipping && $config["Shipping"]["disable_shipping"] != "Y") { //ERROR: No shipping methods selected if (!empty($active_modules["Fast_Lane_Checkout"])) { $no_shipping = true; } else { func_header_location("error_message.php?error_no_shipping"); } } if (($mode == "checkout" || $mode == "gcheckout") && !$func_is_cart_empty && $cart["display_subtotal"] < $config["General"]["minimal_order_amount"] && $config["General"]["minimal_order_amount"] > 0) { //ERROR: Cart total must exceeds the minimum order total amount (defined in General settings) func_header_location("error_message.php?error_min_order"); } if (($mode == "checkout" || $mode == "gcheckout") && !$func_is_cart_empty && $config["General"]["maximum_order_amount"] > 0 && $cart["display_subtotal"] > $config["General"]["maximum_order_amount"]) { //ERROR: Cart total must not exceeds the maximum order total amount (defined in General settings) func_header_location("error_message.php?error_max_order"); } if (($mode == "checkout" || $mode == "gcheckout") && !$func_is_cart_empty && $config["General"]["maximum_order_items"] > 0 && func_cart_count_items($cart) > $config["General"]["maximum_order_items"]) { //ERROR: Cart total must not exceeds the maximum total quantity of products in an order (defined in General settings) func_header_location("error_message.php?error_max_items"); } if ($mode == "gcheckout" && !empty($active_modules['Google_Checkout'])) { //Start Google Checkout define('CHECKOUT_STARTED', 1); include $xcart_dir. "/modules/Google_Checkout/gcheckout.php"; } if ((isset($_POST["checkout"])) && ($_POST["checkout"] == "ready") && ($mode != "order_message") && (isset($_POST["newuserusername"])) && (!empty($_POST["newuserusername"]))) { //new user registration validation $uname = $_POST["newuserusername"]; if ((isset($_POST["newuserpassword"])) && (!empty($_POST["newuserpassword"]))) { $passwd1 = $_POST["newuserpassword"]; } if ((isset($_POST["newuserpasswordconfirm"])) && (!empty($_POST["newuserpasswordconfirm"]))) { $passwd2 = $_POST["newuserpasswordconfirm"]; } if (empty($passwd1) || empty($passwd2)) { func_header_location("error_message.php?error_no_reg_password"); } if (strcmp($passwd1,$passwd2) != 0) { func_header_location("error_message.php?error_registration_passwords_do_not_match"); } } if ((isset($_POST["checkout"])) && ($_POST["checkout"] == "ready") && ($mode != "order_message")) //validate to make sure a PO Box was not entered - JS validation fallback { if (preg_match("/^\s*((P(OST)?.?\s*(O(FF(ICE)?)?)?.?\s+(B(IN|OX))?)|B(IN|OX))/i", $_POST["b_address"]) || preg_match("/^\s*((P(OST)?.?\s*(O(FF(ICE)?)?)?.?\s+(B(IN|OX))?)|B(IN|OX))/i", $_POST["b_address2"]) || preg_match("/^\s*((P(OST)?.?\s*(O(FF(ICE)?)?)?.?\s+(B(IN|OX))?)|B(IN|OX))/i", $_POST["b_address3"]) || preg_match("/^\s*((P(OST)?.?\s*(O(FF(ICE)?)?)?.?\s+(B(IN|OX))?)|B(IN|OX))/i", $_POST["s_address"]) || preg_match("/^\s*((P(OST)?.?\s*(O(FF(ICE)?)?)?.?\s+(B(IN|OX))?)|B(IN|OX))/i", $_POST["s_address2"]) || preg_match("/^\s*((P(OST)?.?\s*(O(FF(ICE)?)?)?.?\s+(B(IN|OX))?)|B(IN|OX))/i", $_POST["s_address3"])) { $top_message["content"] = "Please note: We can NOT accept P.O. Box addresses at this time."; $top_message["type"] = "E"; func_header_location("cart.php?mode=checkout"); } } //die(print($_POST["card_number"] ."
".$tempCCValue)); if ((isset($_POST["checkout"])) && ($_POST["checkout"] == "ready") && (stripos($_POST["card_number"], "***") !== false) && ($tempCCValue == "")) { $top_message["content"] = "Please enter a valid credit card number."; $top_message["type"] = "E"; func_header_location("cart.php?mode=checkout"); } if ((isset($_POST["checkout"])) && ($_POST["checkout"] == "ready") && (stripos($_POST["card_cvv2"], "***") !== false) && ($tempCVV2Value == "")) { $top_message["content"] = "Please enter a valid CVV2 code."; $top_message["type"] = "E"; func_header_location("cart.php?mode=checkout"); } //print($userinfo['b_country']."

"); //print("billing country: ".$_POST['b_country']); /************************************************************** * Main checkout method **************************************************************/ if ((isset($_POST["checkout"])) && ($_POST["checkout"] == "ready") && ($mode != "order_message")) //old redirect -> valuetest.php { if ($_POST["shipToDiff"] == "on") { $ship2diff = "Y"; } else { $ship2diff = "N"; } $smarty->assign("ship2diff", $ship2diff); x_session_save(); //if the user does not have a registered account, create one for them if //they enter a username or an anonymous one otherwise if (empty($login)) { $newUser = true; if (empty($_POST["newuserusername"]) && empty($_POST["newuserpassword"]) && empty($_POST["newuserpasswordconfirm"])) { //set a blank username $uname = ""; //save the session variables x_session_save(); //start the (anonymous) registration process //include $xcart_dir."/include/register.php"; } elseif (!empty($_POST["newuserusername"]) && !empty($_POST["newuserpassword"]) && !empty($_POST["newuserpasswordconfirm"])) { //set the session variables //$uname = $_POST["registerUsername"]; //$passwd1 = $_POST["registerPassword"]; //$passwd2 = $_POST["registerConfirmPassword"]; //save the session variables x_session_save(); //start the registration process //include $xcart_dir."/include/register.php"; } //we need to either create an anonymous user, a new user or update the logged in user //(credit card information is stored here) //all of this is done in register.php include $xcart_dir."/include/register.php"; if (!empty($oids) && empty($top_message) && !$smarty->get_template_vars("top_message") && $initial_state_show_notif == 'Y') { $lng_var = count($oids) > 1 ? "txt_warn_unfinished_orders" : "txt_warn_unfinished_order"; $message = array( 'content' => func_get_langvar_by_name($lng_var, array("orders" => join(", ", $oids), "customer_area_url" => $xcart_catalogs['customer']), false, true), 'type' => 'W'); $smarty->assign("top_message", $message); } $userinfo = func_userinfo($login, $current_area, false, false, "H"); //add tax to order $products = func_products_in_cart($cart, (!empty($user_account["membershipid"]) ? $user_account["membershipid"] : "")); $cart = func_array_merge($cart, func_calculate($cart, $products, $login, $current_area, 0)); /* //if (!empty($cart[taxes])) //{ //redirect the user if sales tax was added to the order so that they can confirm. //hold the values in variables so that the customer does not have to enter them again when we ask them to confirm. $tempCCValue = $_POST["card_number"]; $tempCVV2Value = $_POST["card_cvv2"]; $confirmCCType = $_POST["card_type"]; $confirmCCName = $_POST["card_name"]; $confirmCCExpiration = $_POST["card_expire_Month"] . "/1/" . $_POST["card_expire_Year"]; $smarty->assign("confirmCCType", $confirmCCType); $smarty->assign("confirmCCName", $confirmCCName); $smarty->assign("confirmCCExpiration", $confirmCCExpiration); //display a privatized (read: 4444333322221111 -> ************1111 for CC; 555 -> *** for CVV2) version of the entered number. *THIS VALUE IS PURELY FOR DISPLAY PURPOSE* $confirmCCNumber = ""; $confirmCCCVV2 = ""; //CC - an asterisk will be shown for all characters execpt for the final four. for ($inc = 0; $inc < strlen($tempCCValue) - 4; $inc++) { $confirmCCNumber .= "*"; } $confirmCCNumber .= substr($tempCCValue, -4); $smarty->assign("confirmCCNumber", $confirmCCNumber); //CVV2 - the entire string should be replaced with asterisks. for ($inc = 0; $inc < strlen($tempCVV2Value); $inc++) { $confirmCCCVV2 .= "*"; } $smarty->assign("confirmCCCVV2", $confirmCCCVV2); x_session_save(); //die(print("CC: $tempCCValue -> $confirmCCNumber
CVV2: $tempCVV2Value -> $confirmCCCVV2")); $top_message["content"] = "Please verify the total and that all of your information is correct."; $top_message["type"] = "I"; func_header_location("cart.php?mode=checkout"); //} */ } #Get the payment ID from the page if (!isset($paymentid)) { $paymentid = $_POST["paymentid"]; } $mode = "checkout"; #Set miscellaneous variables based on the payment type if ($paymentid == 1) //credit card { $payment_method = "Credit Card";// (manual processing)"; $status = "Q"; } elseif ($paymentid == 18) //PayPal { $payment_method = "PayPal";// (PayPal)"; $status = "I"; } elseif ($paymentid == 21) //Bill Me Later { $payment_method = "Bill Me Later";// (manual processing)"; $status = "I"; $bml_promo = $_POST["bml_promo"]; } else { //stop running the script exit(); } # Check if paymentid isn't fake $is_egoods = ($config["Egoods"]["egoods_manual_cc_processing"] == "Y" ? func_esd_in_cart($cart) : false); $membershipid = $user_account["membershipid"]; $paypal_pro_condition = ""; $is_valid_paymentid = func_query_first_cell("SELECT COUNT(*) FROM $sql_tbl[payment_methods] LEFT JOIN $sql_tbl[pmethod_memberships] ON $sql_tbl[pmethod_memberships].paymentid = $sql_tbl[payment_methods].paymentid WHERE $sql_tbl[payment_methods].paymentid='$paymentid'".(($is_egoods && $paymentid == 1) ? "" : " AND $sql_tbl[payment_methods].active='Y'")." AND ($sql_tbl[pmethod_memberships].membershipid IS NULL OR $sql_tbl[pmethod_memberships].membershipid = '$membershipid') ".$paypal_pro_condition); if (!$is_valid_paymentid) func_header_location("cart.php?mode=checkout&err=paymentid"); $paypal_expressid = func_query_first_cell("SELECT $sql_tbl[payment_methods].paymentid FROM $sql_tbl[payment_methods], $sql_tbl[ccprocessors] WHERE $sql_tbl[payment_methods].processor_file='ps_paypal_pro.php' AND $sql_tbl[payment_methods].processor_file=$sql_tbl[ccprocessors].processor AND $sql_tbl[payment_methods].paymentid=$sql_tbl[ccprocessors].paymentid AND $sql_tbl[payment_methods].active='Y'"); if (!empty($paypal_expressid) && $paypal_expressid == $paymentid) { if (!empty($active_modules['Fast_Lane_Checkout']) && empty($shipping) && $need_shipping && $config["Shipping"]["disable_shipping"] != "Y") { $top_message["content"] = func_get_langvar_by_name("msg_flc_select_shipping_err"); $top_message["type"] = "E"; func_header_location("cart.php?mode=checkout"); } x_session_register('paypal_begin_express'); x_session_register('paypal_token'); x_session_register("paypal_express_details"); if (($paypal_begin_express !== false && (empty($paypal_token) && empty($paypal_express_details))) || (!empty($paypal_token) && (empty($paypal_express_details) || $paypal_token != $paypal_express_details['Token']))) { $paypal_begin_express = true; func_header_location($current_location.'/payment/ps_paypal_pro.php?payment_id='.$paymentid.'&mode=express'); } } # Generate uniq orderid which will identify order session $order_secureid = md5(uniqid(rand())); $payment_cc_data = func_query_first("SELECT * FROM $sql_tbl[ccprocessors] WHERE paymentid='$paymentid'"); if ($is_egoods && $paymentid != 1 && !empty($payment_cc_data)) { $paymentid = 1; $payment_cc_data = array(); } # Generate payment script URL depending on HTTP/HTTPS settings if (empty($cart['shippingid'])) { $payment_data = func_query_first("SELECT $sql_tbl[payment_methods].*, $sql_tbl[payment_methods].payment_method as payment_method_orig, IFNULL(l1.value, $sql_tbl[payment_methods].payment_method) as payment_method, IFNULL(l2.value, $sql_tbl[payment_methods].payment_details) as payment_details FROM $sql_tbl[payment_methods] LEFT JOIN $sql_tbl[languages_alt] as l1 ON l1.name = CONCAT('payment_method_', $sql_tbl[payment_methods].paymentid) AND l1.code = '$shop_language' LEFT JOIN $sql_tbl[languages_alt] as l2 ON l2.name = CONCAT('payment_details_', $sql_tbl[payment_methods].paymentid) AND l2.code = '$shop_language' WHERE $sql_tbl[payment_methods].paymentid='$paymentid'"); } else { $payment_data = func_query_first("SELECT $sql_tbl[payment_methods].*, $sql_tbl[payment_methods].payment_method as payment_method_orig, IFNULL(l1.value, $sql_tbl[payment_methods].payment_method) as payment_method, IFNULL(l2.value, $sql_tbl[payment_methods].payment_details) as payment_details FROM $sql_tbl[payment_methods] LEFT JOIN $sql_tbl[languages_alt] as l1 ON l1.name = CONCAT('payment_method_', $sql_tbl[payment_methods].paymentid) AND l1.code = '$shop_language' LEFT JOIN $sql_tbl[languages_alt] as l2 ON l2.name = CONCAT('payment_details_', $sql_tbl[payment_methods].paymentid) AND l2.code = '$shop_language' LEFT JOIN $sql_tbl[shipping] ON $sql_tbl[shipping].shippingid = '$cart[shippingid]' WHERE $sql_tbl[payment_methods].paymentid='$paymentid' AND ($sql_tbl[payment_methods].is_cod != 'Y' || $sql_tbl[shipping].is_cod = 'Y')"); } if (empty($payment_data)) { func_header_location("cart.php?mode=checkout"); } $cart["paymentid"] = $paymentid; $payment_data["payment_script_url"] = ($payment_data["protocol"] == "https" ? $https_location : $http_location)."/payment/".$payment_data["payment_script"]; if (!empty($payment_cc_fields)) { $userinfo = func_array_merge($userinfo, $payment_cc_fields); } if ($payment_data["processor_file"] == "ps_paypal_pro.php") { $payment_cc_data = func_query_first("SELECT * FROM $sql_tbl[ccprocessors] WHERE processor='ps_paypal_pro.php'"); } if (!empty($active_modules['Google_Analytics']) && $config['Google_Analytics']['ganalytics_e_commerce_analysis'] == 'Y') { $ga_track_commerce = "Y"; } #Check if only one shipping method is available and hide link on the checkout page if (!empty($active_modules["Fast_Lane_Checkout"]) && (count($shipping) > 1 || (count($shipping) == 1 && ($_carriers["UPS"] + $_carriers["other"]) > 1))) $smarty->assign("change_shipping_link","Y"); $payment_data['module_params'] = func_query_first("SELECT * FROM $sql_tbl[ccprocessors] WHERE paymentid = '$payment_data[paymentid]'"); $location[] = array(func_get_langvar_by_name("lbl_payment_details"), ""); #do the checkout if (!isset($card_expire) && isset($card_expire_Month)) { $card_expire_Month = sprintf("%02d",intval($card_expire_Month)); $card_expire_Year = sprintf("%04d",intval($card_expire_Year)); $card_expire = $card_expire_Month.substr($card_expire_Year, 2); } else { $card_expire = sprintf("%04d",intval($card_expire)); } //set the status of the bill me later promo checkbox x_session_register("bml_promo_ck"); if($bml_promo == "on"){ $bml_promo_ck = 'true'; }else{ $bml_promo_ck = 'false'; } //save the entered payment information $user_payment_data = $payment_data; $smarty->assign("user_payment_data", $user_payment_data); $smarty->assign("payment_cc_data", $payment_cc_data); $smarty->assign("payment_data",$payment_data); $smarty->assign("userinfo",$userinfo); $smarty->assign("cart",$cart); $smarty->assign("main","onepagecheckout"); $cartpost = "Y"; //save our x cart session variables x_session_save(); //retrieve payment data from the webpage to post to the payment processor $card_name = $_POST["card_name"]; $card_type = $_POST["card_type"]; if (stripos($_POST["card_number"], "***") === false) { $card_number = $_POST["card_number"]; } else { $card_number = $tempCCValue; } if (stripos($_POST["card_cvv2"], "***") === false) { $card_cvv2 = $_POST["card_cvv2"]; } else { $card_cvv2 = $tempCVV2Value; } $card_expiration = $card_expire; func_header_location($payment_data["payment_script_url"]); } elseif ($mode == "checkout" && !$func_is_cart_empty) //dcahill - cart screen population? { #dcahill - needed to populate payment methods # Prepare the page for payment method selection $payment_methods = check_payment_methods_nomembership(); $force_change_shipping = (!empty($active_modules["Fast_Lane_Checkout"]) && (count($shipping) > 1 || (count($shipping) == 1 && ($_carriers["UPS"] + $_carriers["other"]) > 1) || ($need_shipping && empty($shipping)))); if (count($payment_methods) == 1 && !$force_change_shipping) { # Skip payment method selection if only one method is available func_header_location("cart.php?paymentid=".$payment_methods[0]["paymentid"]."&mode=checkout"); } if (!empty($payment_methods)) { $payment_methods[0]["is_default"] = 1; } $smarty->assign("payment_methods",$payment_methods); $smarty->assign("main","onepagecheckout"); $location[] = array(func_get_langvar_by_name("lbl_payment_details"), ""); x_session_unregister('paypal_begin_express'); } elseif ($mode == "order_message") //Show the order completed screen with invoice { if (empty($orderids)) { $orderids = $_GET["orderids"]; } if (empty($login)) { $login = $uname; } # # Display the invoice page (order confirmation page) # $orders = array (); if (!empty($orderids)) { if (empty($login)) { //currently an empty login ID after a new user / anon user func_header_location("error_message.php?access_denied&id=32"); } $_orderids = split(",",$orderids); foreach ($_orderids as $orderid) { $order_data = func_order_data($orderid); # Security check if current customer is not order's owner if (empty($order_data) || $order_data["order"]["login"] != $login) { unset($order_data); continue; } else { $order_data["products"] = func_translate_products($order_data["products"], $shop_language); } $orders[] = $order_data; } } $EFTotalCost = $orders[0]["order"]["subtotal"]; $smarty->assign("EFTotalCost", $EFTotalCost); $EFTotalProducts = 0; foreach ($orders[0]["products"] as $_prod) { //print($_prod["amount"]); $EFTotalProducts = $EFTotalProducts + $_prod["amount"]; } $smarty->assign("EFTotalProducts", $EFTotalProducts); //jriggs code to generate webtrends url $spacer = ''; $comma = ''; $wtUrl =''; $qty_string=''; $sku_string=''; $product_string = ''; foreach ($orders as $key => $order) { foreach ($order['products'] as $p_key => $product) { $qty_string .= $spacer . $orders[$key]['products'][$p_key]['amount']; $sku_string .= $spacer . $orders[$key]['products'][$p_key]['productcode']; $product_string .= $comma . $orders[$key]['products'][$p_key]['product'] . '#' . ($orders[$key]['products'][$p_key]['price'] *100) . '*' . $orders[$key]['products'][$p_key]['amount']; $spacer = '|'; $comma = ','; } } $smarty->assign("webtrend_order_string", "u1=$qty_string;u2=$sku_string;"); $smarty->assign("webtrend_product_string", $product_string); x_session_register("hear_about_us"); if ($hear_about_us != '') { db_query("update xcart_orders set notes='$hear_about_us' where orderid =" . $_GET['orderids']); }else{ db_query("update xcart_orders set notes='INET' where orderid =" . $_GET['orderids']); } x_session_unregister('hear_about_us'); if (empty($orders)) { func_header_location("error_message.php?access_denied&id=59"); } if (!empty($active_modules['Google_Analytics']) && $config['Google_Analytics']['ganalytics_e_commerce_analysis'] == "Y") { foreach ($orders as $key => $order) { foreach ($order['products'] as $p_key => $product) { $orders[$key]['products'][$p_key]['category'] = func_query_first_cell("SELECT $sql_tbl[categories].category FROM $sql_tbl[categories],$sql_tbl[products_categories] WHERE $sql_tbl[categories].categoryid = $sql_tbl[products_categories].categoryid AND $sql_tbl[products_categories].productid='".$product['productid']."' AND $sql_tbl[products_categories].main='Y'"); } } } $smarty->assign("order", $order); $smarty->assign("orders", $orders); $smarty->assign("ga_track_commerce", $ga_track_commerce); $ga_track_commerce = "N"; if ($action == "print") { $smarty->assign("template", "customer/main/order_message.tpl"); func_display("customer/preview.tpl",$smarty); exit; } $smarty->assign("orderids", $orderids); $smarty->assign("main","order_message"); $location[] = array(func_get_langvar_by_name("lbl_order_processed"), ""); if (isset($_COOKIE["LS_siteID"]) && $_COOKIE["LS_siteID"] != "") { require ("linkshare.php"); } if (isset($_COOKIE["mullen_landing"]) ) { require ("mullen.php"); } if (isset($_COOKIE["escort_ref"]) && isset($_COOKIE["escort_ref_date_entered"]) ) { require ("log_ref.php"); } //clear the cart if (!empty($active_modules["SnS_connector"]) && !empty($cart["products"])) { foreach ($cart["products"] as $p) { $is_sns_action['DeleteFromCart'][] = $p['productid']; } } $cart = ""; } //dcahill - commented for testing /* //require $xcart_dir."/include/categories.php"; //if ($active_modules["Manufacturers"]) // include $xcart_dir."/modules/Manufacturers/customer_manufacturers.php"; $giftcerts = (!empty($cart["giftcerts"]) ? $cart["giftcerts"] : array()); */ # # Update minicart # include "./minicart.php"; if (!empty($payment_cc_fields)) { $userinfo = func_array_merge($userinfo, $payment_cc_fields); } //if we have cached user information, store it in a usable variable so that the cart will display it if (!empty($login) || $mode != "checkout") { $smarty->assign("userinfo", @$userinfo); } $smarty->assign("products", @$products); //$smarty->assign("giftcerts", $giftcerts); func_save_customer_cart($login, $cart); /* $allow_cod = func_query_first_cell("SELECT COUNT(*) FROM $sql_tbl[payment_methods] WHERE active = 'Y' AND is_cod = 'Y'") > 0; $smarty->assign("allow_cod", $allow_cod); $display_cod = func_query_first_cell("SELECT COUNT(*) FROM $sql_tbl[shipping] WHERE active = 'Y' AND is_cod = 'Y' AND shippingid = '$cart[shippingid]'") > 0; $smarty->assign("display_cod", $display_cod); # # Detect PayPal Pro status # if (test_active_bouncer() && ($config['General']['disable_anonymous_checkout'] != 'Y' || !empty($login)) && $paypal_expressid == $paymentid) { $paypal_express_active = func_query_first_cell("SELECT $sql_tbl[payment_methods].paymentid FROM $sql_tbl[ccprocessors], $sql_tbl[payment_methods] WHERE $sql_tbl[ccprocessors].processor='ps_paypal_pro.php' AND $sql_tbl[ccprocessors].paymentid=$sql_tbl[payment_methods].paymentid AND $sql_tbl[payment_methods].active='Y' ORDER BY $sql_tbl[payment_methods].protocol DESC LIMIT 1"); $smarty->assign("paypal_express_active", $paypal_express_active); x_session_unregister('paypal_begin_express'); if (!empty($paypal_express_active) && $config['paypal_solution'] == 'uk') $smarty->assign("force_uk_ccinfo", true); } if (is_array($initial_state_orders) && !empty($initial_state_orders)) { $oids = array(); foreach ($initial_state_orders as $k => $v) { if (func_query_first_cell("SELECT status FROM $sql_tbl[orders] WHERE orderid = '" . (int)$v . "'") == 'I') { $oids[] = $v; } else { unset($initial_state_orders[$k]); } } if (!empty($oids) && empty($top_message) && !$smarty->get_template_vars("top_message") && $initial_state_show_notif == 'Y') { $lng_var = count($oids) > 1 ? "txt_warn_unfinished_orders" : "txt_warn_unfinished_order"; $message = array( 'content' => func_get_langvar_by_name($lng_var, array("orders" => join(", ", $oids), "customer_area_url" => $xcart_catalogs['customer']), false, true), 'type' => 'W'); $smarty->assign("top_message", $message); } } */ x_session_save(); /* $smarty->assign("dhl_ext_country", $dhl_ext_country); $smarty->assign("dhl_ext_countries", $dhl_ext_countries); $smarty->assign("partner", $partner); if (!empty($active_modules["Fast_Lane_Checkout"])) include $xcart_dir."/modules/Fast_Lane_Checkout/cart.php"; */ # Assign the current location line $smarty->assign("location", $location); func_display("customer/home.tpl",$smarty); ?>
